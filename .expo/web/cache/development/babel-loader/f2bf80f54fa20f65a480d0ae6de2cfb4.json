{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Realm from \"realm\";\nimport app from \"../../../RealmApp\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar AuthContext = React.createContext(null);\n\nvar AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(app.currentUser),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var realmRef = useRef(null);\n  useEffect(function () {\n    if (!user) {\n      console.warn(\"NO USER Logged In\");\n      return;\n    }\n\n    var config = {\n      sync: {\n        user: user,\n        partitionValue: \"user=\" + user.id\n      }\n    };\n    Realm.open(config).then(function (userRealm) {\n      realmRef.current = userRealm;\n    });\n    return function () {\n      var userRealm = realmRef.current;\n\n      if (userRealm) {\n        userRealm.close();\n        realmRef.current = null;\n      }\n    };\n  }, [user]);\n\n  var signIn = function () {\n    var _ref2 = _asyncToGenerator(function* (email, password) {\n      var creds = Realm.Credentials.emailPassword(email, password);\n      var newUser = yield app.logIn(creds);\n      setUser(newUser);\n    });\n\n    return function signIn(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var signUp = function () {\n    var _ref3 = _asyncToGenerator(function* (email, password) {\n      yield app.emailPasswordAuth.registerUser({\n        email: email,\n        password: password\n      });\n    });\n\n    return function signUp(_x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var signOut = function signOut() {\n    if (user == null) {\n      console.warn(\"Not logged in, can't log out!\");\n      return;\n    }\n\n    user.logOut();\n    setUser(null);\n  };\n\n  return _jsx(AuthContext.Provider, {\n    value: {\n      signUp: signUp,\n      signIn: signIn,\n      signOut: signOut,\n      user: user\n    },\n    children: children\n  });\n};\n\nvar useAuth = function useAuth() {\n  var auth = useContext(AuthContext);\n\n  if (auth == null) {\n    throw new Error(\"useAuth() called outside of a AuthProvider?\");\n  }\n\n  return auth;\n};\n\nexport { AuthProvider, useAuth };","map":{"version":3,"names":["React","useContext","useState","useEffect","useRef","Realm","app","AuthContext","createContext","AuthProvider","children","currentUser","user","setUser","realmRef","console","warn","config","sync","partitionValue","id","open","then","userRealm","current","close","signIn","email","password","creds","Credentials","emailPassword","newUser","logIn","signUp","emailPasswordAuth","registerUser","signOut","logOut","useAuth","auth","Error"],"sources":["/Users/sofia.howard/cultural-survival/src/utils/providers/AuthProviders.tsx"],"sourcesContent":["import React, {\n  useContext,\n  useState,\n  useEffect,\n  useRef,\n  MutableRefObject,\n} from \"react\";\nimport Realm from \"realm\";\nimport app from \"../../../RealmApp\";\n\n// Create a new Context object that will be provided to descendants of\n// the AuthProvider.\nconst AuthContext = React.createContext(null);\n\n// The AuthProvider is responsible for user management and provides the\n// AuthContext value to its descendants. Components under an AuthProvider can\n// use the useAuth() hook to access the auth value.\nconst AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(app.currentUser);\n  const realmRef: MutableRefObject<Realm | null> = useRef<Realm | null>(null);\n\n  useEffect(() => {\n    if (!user) {\n      console.warn(\"NO USER Logged In\");\n      return;\n    }\n\n    const config = {\n      sync: {\n        user,\n        partitionValue: `user=${user.id}`,\n      },\n    };\n\n    // Open a realm with the logged in user's partition value in order\n    // to get the links that the logged in user added\n    // (instead of all the links stored for all the users)\n    Realm.open(config).then((userRealm) => {\n      realmRef.current = userRealm;\n    });\n\n    return () => {\n      // cleanup function\n      const userRealm = realmRef.current;\n      if (userRealm) {\n        userRealm.close();\n        realmRef.current = null;\n      }\n    };\n  }, [user]);\n\n  // The signIn function takes an email and password and uses the\n  // emailPassword authentication provider to log in.\n  // This authentication method should be set up correctly on the MongoDB Realm App\n  // see: https://docs.mongodb.com/realm/authentication/providers/\n  const signIn = async (email, password) => {\n    const creds = Realm.Credentials.emailPassword(email, password);\n    const newUser = await app.logIn(creds);\n    setUser(newUser);\n  };\n\n  // The signUp function takes an email and password and uses the\n  // emailPassword authentication provider to register the user.\n  // This authentication should be set up correctly on the MongoDB Realm App\n  // see: https://docs.mongodb.com/realm/authentication/providers/\n  const signUp = async (email, password) => {\n    await app.emailPasswordAuth.registerUser({ email, password });\n  };\n\n  // The signOut function calls the logOut function on the currently\n  // logged in user\n  const signOut = () => {\n    if (user == null) {\n      console.warn(\"Not logged in, can't log out!\");\n      return;\n    }\n    user.logOut();\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        signUp,\n        signIn,\n        signOut,\n        user,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// The useAuth hook can be used by components under an AuthProvider to\n// access the auth context value.\nconst useAuth = () => {\n  const auth = useContext(AuthContext);\n  if (auth == null) {\n    throw new Error(\"useAuth() called outside of a AuthProvider?\");\n  }\n  return auth;\n};\n\nexport { AuthProvider, useAuth };\n"],"mappings":";;AAAA,OAAOA,KAAP,IACEC,UADF,EAEEC,QAFF,EAGEC,SAHF,EAIEC,MAJF,QAMO,OANP;AAOA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP;;AAIA,IAAMC,WAAW,GAAGP,KAAK,CAACQ,aAAN,CAAoB,IAApB,CAApB;;AAKA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAkB;EAAA,IAAfC,QAAe,QAAfA,QAAe;;EACrC,gBAAwBR,QAAQ,CAACI,GAAG,CAACK,WAAL,CAAhC;EAAA;EAAA,IAAOC,IAAP;EAAA,IAAaC,OAAb;;EACA,IAAMC,QAAwC,GAAGV,MAAM,CAAe,IAAf,CAAvD;EAEAD,SAAS,CAAC,YAAM;IACd,IAAI,CAACS,IAAL,EAAW;MACTG,OAAO,CAACC,IAAR,CAAa,mBAAb;MACA;IACD;;IAED,IAAMC,MAAM,GAAG;MACbC,IAAI,EAAE;QACJN,IAAI,EAAJA,IADI;QAEJO,cAAc,YAAUP,IAAI,CAACQ;MAFzB;IADO,CAAf;IAUAf,KAAK,CAACgB,IAAN,CAAWJ,MAAX,EAAmBK,IAAnB,CAAwB,UAACC,SAAD,EAAe;MACrCT,QAAQ,CAACU,OAAT,GAAmBD,SAAnB;IACD,CAFD;IAIA,OAAO,YAAM;MAEX,IAAMA,SAAS,GAAGT,QAAQ,CAACU,OAA3B;;MACA,IAAID,SAAJ,EAAe;QACbA,SAAS,CAACE,KAAV;QACAX,QAAQ,CAACU,OAAT,GAAmB,IAAnB;MACD;IACF,CAPD;EAQD,CA5BQ,EA4BN,CAACZ,IAAD,CA5BM,CAAT;;EAkCA,IAAMc,MAAM;IAAA,8BAAG,WAAOC,KAAP,EAAcC,QAAd,EAA2B;MACxC,IAAMC,KAAK,GAAGxB,KAAK,CAACyB,WAAN,CAAkBC,aAAlB,CAAgCJ,KAAhC,EAAuCC,QAAvC,CAAd;MACA,IAAMI,OAAO,SAAS1B,GAAG,CAAC2B,KAAJ,CAAUJ,KAAV,CAAtB;MACAhB,OAAO,CAACmB,OAAD,CAAP;IACD,CAJW;;IAAA,gBAANN,MAAM;MAAA;IAAA;EAAA,GAAZ;;EAUA,IAAMQ,MAAM;IAAA,8BAAG,WAAOP,KAAP,EAAcC,QAAd,EAA2B;MACxC,MAAMtB,GAAG,CAAC6B,iBAAJ,CAAsBC,YAAtB,CAAmC;QAAET,KAAK,EAALA,KAAF;QAASC,QAAQ,EAARA;MAAT,CAAnC,CAAN;IACD,CAFW;;IAAA,gBAANM,MAAM;MAAA;IAAA;EAAA,GAAZ;;EAMA,IAAMG,OAAO,GAAG,SAAVA,OAAU,GAAM;IACpB,IAAIzB,IAAI,IAAI,IAAZ,EAAkB;MAChBG,OAAO,CAACC,IAAR,CAAa,+BAAb;MACA;IACD;;IACDJ,IAAI,CAAC0B,MAAL;IACAzB,OAAO,CAAC,IAAD,CAAP;EACD,CAPD;;EASA,OACE,KAAC,WAAD,CAAa,QAAb;IACE,KAAK,EAAE;MACLqB,MAAM,EAANA,MADK;MAELR,MAAM,EAANA,MAFK;MAGLW,OAAO,EAAPA,OAHK;MAILzB,IAAI,EAAJA;IAJK,CADT;IAAA,UAQGF;EARH,EADF;AAYD,CA3ED;;AA+EA,IAAM6B,OAAO,GAAG,SAAVA,OAAU,GAAM;EACpB,IAAMC,IAAI,GAAGvC,UAAU,CAACM,WAAD,CAAvB;;EACA,IAAIiC,IAAI,IAAI,IAAZ,EAAkB;IAChB,MAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;EACD;;EACD,OAAOD,IAAP;AACD,CAND;;AAQA,SAAS/B,YAAT,EAAuB8B,OAAvB"},"metadata":{},"sourceType":"module"}